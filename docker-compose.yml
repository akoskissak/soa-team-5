version: "3.8"

services:
  blog-service:
    build:
      context: ./blog-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - backend_network
    depends_on:
      postgresdb:
        condition: service_healthy
    env_file:
      - .env

  stakeholders:
    build:
      context: ./stakeholders-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - backend_network
    env_file:
      - .env
    depends_on:
      neo4j:
        condition: service_healthy

  follower-service:
    build:
      context: ./follower-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - backend_network
    env_file:
      - .env
    depends_on:
      neo4j:
        condition: service_healthy

  tours-service:
    build:
      context: ./tours-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - backend_network
    env_file:
      - .env
    depends_on:
      toursdb:
        condition: service_healthy


  neo4j:
    image: neo4j:5
    container_name: neo4j
    ports:
      - "7474:7474" # Za prikaz u browseru
      - "7687:7687"
    environment:
      NEO4J_AUTH: "neo4j/najboljitim5"
    healthcheck:
      test: ["CMD-SHELL", "neo4j status"]
      interval: 10s
      timeout: 5s
      retries: 20
    volumes:
      - neo4j_data:/data
    networks:
      - backend_network

  postgresdb:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: blog_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d blog_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  toursdb:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    volumes:
      - tours_postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_DB: tour_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tour_db"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  neo4j_data:
  tours_postgres_data:

networks:
  backend_network:
    driver: bridge
