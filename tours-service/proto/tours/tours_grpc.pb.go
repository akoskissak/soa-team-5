// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: tours/tours.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToursService_CreateTour_FullMethodName       = "/tours.ToursService/CreateTour"
	ToursService_GetAllTours_FullMethodName      = "/tours.ToursService/GetAllTours"
	ToursService_CreateKeyPoint_FullMethodName   = "/tours.ToursService/CreateKeyPoint"
	ToursService_AddReview_FullMethodName        = "/tours.ToursService/AddReview"
	ToursService_DrawOnMap_FullMethodName        = "/tours.ToursService/DrawOnMap"
	ToursService_SimulatePosition_FullMethodName = "/tours.ToursService/SimulatePosition"
)

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*Tour, error)
	GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error)
	CreateKeyPoint(ctx context.Context, in *CreateKeyPointRequest, opts ...grpc.CallOption) (*KeyPoint, error)
	AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error)
	DrawOnMap(ctx context.Context, in *DrawOnMapRequest, opts ...grpc.CallOption) (*DrawOnMapResponse, error)
	SimulatePosition(ctx context.Context, in *SimulatePositionRequest, opts ...grpc.CallOption) (*SimulatePositionResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*Tour, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tour)
	err := c.cc.Invoke(ctx, ToursService_CreateTour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllToursResponse)
	err := c.cc.Invoke(ctx, ToursService_GetAllTours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) CreateKeyPoint(ctx context.Context, in *CreateKeyPointRequest, opts ...grpc.CallOption) (*KeyPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyPoint)
	err := c.cc.Invoke(ctx, ToursService_CreateKeyPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReviewResponse)
	err := c.cc.Invoke(ctx, ToursService_AddReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) DrawOnMap(ctx context.Context, in *DrawOnMapRequest, opts ...grpc.CallOption) (*DrawOnMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DrawOnMapResponse)
	err := c.cc.Invoke(ctx, ToursService_DrawOnMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) SimulatePosition(ctx context.Context, in *SimulatePositionRequest, opts ...grpc.CallOption) (*SimulatePositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimulatePositionResponse)
	err := c.cc.Invoke(ctx, ToursService_SimulatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility.
type ToursServiceServer interface {
	CreateTour(context.Context, *CreateTourRequest) (*Tour, error)
	GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error)
	CreateKeyPoint(context.Context, *CreateKeyPointRequest) (*KeyPoint, error)
	AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error)
	DrawOnMap(context.Context, *DrawOnMapRequest) (*DrawOnMapResponse, error)
	SimulatePosition(context.Context, *SimulatePositionRequest) (*SimulatePositionResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToursServiceServer struct{}

func (UnimplementedToursServiceServer) CreateTour(context.Context, *CreateTourRequest) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedToursServiceServer) GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedToursServiceServer) CreateKeyPoint(context.Context, *CreateKeyPointRequest) (*KeyPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPoint not implemented")
}
func (UnimplementedToursServiceServer) AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReview not implemented")
}
func (UnimplementedToursServiceServer) DrawOnMap(context.Context, *DrawOnMapRequest) (*DrawOnMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawOnMap not implemented")
}
func (UnimplementedToursServiceServer) SimulatePosition(context.Context, *SimulatePositionRequest) (*SimulatePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulatePosition not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}
func (UnimplementedToursServiceServer) testEmbeddedByValue()                      {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	// If the following call pancis, it indicates UnimplementedToursServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetAllTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetAllTours(ctx, req.(*GetAllToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_CreateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).CreateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_CreateKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).CreateKeyPoint(ctx, req.(*CreateKeyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_AddReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_AddReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).AddReview(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_DrawOnMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawOnMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).DrawOnMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_DrawOnMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).DrawOnMap(ctx, req.(*DrawOnMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_SimulatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).SimulatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_SimulatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).SimulatePosition(ctx, req.(*SimulatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tours.ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTour",
			Handler:    _ToursService_CreateTour_Handler,
		},
		{
			MethodName: "GetAllTours",
			Handler:    _ToursService_GetAllTours_Handler,
		},
		{
			MethodName: "CreateKeyPoint",
			Handler:    _ToursService_CreateKeyPoint_Handler,
		},
		{
			MethodName: "AddReview",
			Handler:    _ToursService_AddReview_Handler,
		},
		{
			MethodName: "DrawOnMap",
			Handler:    _ToursService_DrawOnMap_Handler,
		},
		{
			MethodName: "SimulatePosition",
			Handler:    _ToursService_SimulatePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours/tours.proto",
}
